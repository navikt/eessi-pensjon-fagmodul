<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="00a9b70f-bfe7-4c37-9b12-0841e1e23a81" activeEnvironment="Default" name="EESSIPEN-BASIS" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="Port">8089</con:setting><con:setting id="Set endpoint for HTTP Tunnel:">https://</con:setting><con:setting id="HTTP tunnel - KeyStore"/><con:setting id="HTTP tunnel - Password"/><con:setting id="HTTP tunnel - KeyPassword"/><con:setting id="HTTP tunnel - TrustStore"/><con:setting id="HTTP tunnel - TrustStore Password"/><con:setting id="Reuse request state">false</con:setting><con:setting id="HTTP tunnel - Set SSL Client Key Store path"/><con:setting id="Content types to monitor">*/html, */xml, */soap+xml, */json, */x-json, */javascript, */x-amf, */http</con:setting><con:setting id="HTTP tunnel - Set SSL Client Key Store Password"/></con:settings><con:interface xsi:type="con:RestService" id="5a77ecfe-273b-430a-ac74-46091b17ac1c" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a34duvw03535:8089/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints></con:interface><con:testSuite id="93c5b809-2e5a-42ec-a75b-51183d2dd940" name="TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="7c5629a1-63c8-4508-a418-3b7a0126647e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="2773a1e9-44ae-4000-8925-e453857f1614" port="8089" path="/" host="a34duvw03535" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:onRequestScript>log.info(mockRequest.getRequestContent())</con:onRequestScript><con:afterRequestScript>log.info(mockResult.getResponseContent())</con:afterRequestScript><con:restMockAction name="/" method="POST" resourcePath="/" id="3b8daad5-5a38-4d88-8d03-7ac7b5ad4c20"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1b66d64a-49bf-4d28-8275-84dc8897441c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "korrelasjonsID" : "49dd7583-c1d3-4636-97e3-42594e167e70",
  "status" : "StausæøåÆØÅ",
  "rinasaksnummer" : "RINA_130201_12",
  "nyere_parameter_versjon2" : "Denne skal ikke være med."
}</con:responseContent></con:response><con:response name="Response 2" id="a0af9a12-de7d-4add-8557-f35c20bc16fd" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "korrelasjonsID" : "49dd7583-c1d3-4636-97e3-42594e167e70",
  "status" : "ÆØÅ  status status",
  "rinasaksnummer" : "RINA_130201_232",
  "nyere_parameter_versjon2" : "Denne skal _være_ med."
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="getAllInstitutions" method="GET" resourcePath="/cpi/getInstitutions" id="9dc4d929-452a-4549-a766-012233dc66b7"><con:settings/><con:defaultResponse>InstitutionsResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="InstitutionsResponse" id="03c435f3-0208-4421-9cfc-5a338b9b8671" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[ 
{
  "landkode" : "SE",
  "navn" : "Sverige"
}, 
{
  "landkode" : "DK",
  "navn" : "Danmark"
}, 
{
  "landkode" : "FI",
  "navn" : "Finland"
} 
]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="getSingleInstitutionById" method="GET" resourcePath="/cpi/getInstitution" id="fdd1f7d6-1c3a-4fbf-846a-e13c2433f1f6"><con:settings/><con:defaultResponse>ResponseOne</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString
if( requestPath.contains("json") {
log.indo "JSON"	
}

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="ResponseOne" id="bf152334-38b5-451a-8a88-eaf44c691364" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "landkode" : "FI",
  "navn" : "Finland"
} </con:responseContent></con:response><con:response name="ResponseTwo" id="85899ea4-8a58-4dd3-af98-ffa62c610f56" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "landkode" : "NO",
  "navn" : "Norge"
} </con:responseContent></con:response></con:restMockAction><con:restMockAction name="getInstitutionByTopic" method="GET" resourcePath="/cpi/getInstitution/bytopic/${topic}" id="3208af48-9ba6-49e2-bec2-f05b9b5e01b9"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6a3533dd-3437-454c-9b67-b2057d42a3c0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "landkode" : "FI",
  "navn" : "Finland"
} </con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>