buildscript {

    ext {
        kotlinVersion = '1.6.10'
        springBootVersion = '2.6.5'
        springfoxVersion = '3.0.0'
        jacksonModuleKotlinVersion = '2.13.2'
        cxfVersion = '3.5.1'
        tokenSupportVersion = '1.3.9'
        logstashLogbackVersion = '7.0.1'
        archunitVersion = '0.22.0'
        pensjonInformasjonVersion = '9.4.10'
        eppersonoppslagVersion = '8.2.+'
        epeuxVersion = '1.+'
        epMetricsVersion = '0.4.+'
        epSecurityVersion = '0.0.22'
        epLoggingVersion = '1.+'
    }

    repositories {
        mavenCentral()
    }

}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "se.patrikerdes.use-latest-versions" version "0.2.18"
    id "org.owasp.dependencycheck" version "7.0.1"
    id "com.vanniktech.dependency.graph.generator" version "0.7.0"
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

group = 'no.nav.eessi'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

jar {
    archivesBaseName = 'eessi-fagmodul'
}

configurations {
    xsd
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-actuator:$springBootVersion")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlinVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonModuleKotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    // Swagger
//    implementation("org.springdoc:springdoc-openapi-ui:1.6.3")
//    implementation("org.springdoc:springdoc-openapi-kotlin:1.6.3")
//    implementation('org.springdoc:springdoc-openapi-webmvc-core:1.6.3')
//    implementation('org.springdoc:springdoc-openapi-data-rest:1.6.3')

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:$logstashLogbackVersion")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    // auditlogger syslog la stÃ¥ i 1.0.0 / 0.9.30
    implementation("com.papertrailapp:logback-syslog4j:1.0.0")
    implementation("org.syslog4j:syslog4j:0.9.30")

    // OIDC
    implementation("no.nav.security:token-validation-spring:$tokenSupportVersion")
    implementation("no.nav.security:token-validation-jaxrs:$tokenSupportVersion")
    implementation("no.nav.security:token-client-spring:$tokenSupportVersion")
    // Only used for starting up locally
    implementation("no.nav.security:token-validation-test-support:$tokenSupportVersion")

    testImplementation("org.pac4j:spring-webmvc-pac4j:5.1.0")

    // Tjenestespesifikasjoner
    xsd("no.nav.tjenestespesifikasjoner:pensjonsinformasjon-v1-tjenestespesifikasjon:1.2021.01.21-11.34-02f5eb27bb76")

    implementation("com.sun.xml.ws:jaxws-ri:2.3.2")
    jaxb ('org.glassfish.jaxb:jaxb-xjc:2.3.2')
    jaxb ('org.glassfish.jaxb:jaxb-runtime:2.3.2')

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus:1.8.1")

    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")
    implementation("no.nav.eessi.pensjon:ep-security-sts:$epSecurityVersion")
    implementation("no.nav.eessi.pensjon:ep-logging:$epLoggingVersion")
    implementation("no.nav.eessi.pensjon:ep-personoppslag:$eppersonoppslagVersion")
    implementation("no.nav.eessi.pensjon:ep-eux:$epeuxVersion")

    // Forenklere mocking av beans, benyttes som mockito mockbean
    testImplementation("com.ninja-squad:springmockk:3.1.1")

    //mock - test
    testImplementation("io.mockk:mockk:1.12.3")
    testImplementation("org.junit.platform:junit-platform-suite-api:1.8.2")
    testImplementation("org.skyscreamer:jsonassert:1.5.0")

    //Kafka
    implementation("org.springframework.kafka:spring-kafka:2.8.4")
    testImplementation("org.springframework.kafka:spring-kafka-test:2.8.4")

    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlinVersion") {
        exclude module: 'kotlin-test-js'
        exclude module: 'kotlin-test-testng'
    }

    // Architecture tests keep archunit at 0.22
    testImplementation("com.tngtech.archunit:archunit:$archunitVersion")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: 'junit-vintage-engine'
    }
}


test {
    useJUnitPlatform()
}

// Temporary - until these misplaced dirs are cleaned in all builds
processResources.doFirst {
    delete "${projectDir}/src/main/resources/schemas"
    delete "${projectDir}/src/main/resources/xsdtemp"
}

ext.xsdTemp = "${buildDir}/xsdtemp"
ext.schemasDir = "${buildDir}/schemas"
ext.xsdArtifactName = "pensjonsinformasjon-xsd.jar"

ext.pensjonsinformasjonDir = "${schemasDir}"

task copyPensjonsinformasjonXsd(type: Copy) {
    from(configurations.xsd) {
        rename '^pensjonsinformasjon.*', 'pensjonsinformasjon-xsd.jar'
    }
    into xsdTemp
}

task copyPensjonsinformasjonXsdsFromArtifacts(type: Copy) {
    with copyPensjonsinformasjonXsd
    includeEmptyDirs = false
    from zipTree( xsdTemp + "/" + xsdArtifactName)
    include '**/*.xsd'
    into pensjonsinformasjonDir
}

jaxb {
    xsdDir = pensjonsinformasjonDir
}

copyPensjonsinformasjonXsdsFromArtifacts.dependsOn tasks["copyPensjonsinformasjonXsd"]
xjc.dependsOn tasks["copyPensjonsinformasjonXsdsFromArtifacts"]
compileKotlin.dependsOn tasks["xjc"]

sourceSets["main"].resources.srcDir(schemasDir)
sourceSets["main"].java.srcDir("${buildDir}/generated-sources/xjc")

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenCentral()

    ["maven-release","ep-personoppslag","tjenestespesifikasjoner","ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
