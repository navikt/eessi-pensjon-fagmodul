buildscript {
    ext {
        kotlinVersion = '1.3.41'
        springBootVersion = '2.1.6.RELEASE'
        springSecurityVersion = '5.0.5.RELEASE'
        prometheusVersion = '0.5.0'
        springfoxVersion = '2.9.2'
        jacksonModuleKotlinVersion = '2.9.9'
        cxfVersion = '3.2.6'
        mockitoVersion = '2.8.+'
        personV3Version = '3.4.1'
        oidcTokenSupportVersion = '0.2.9'
        logstashLogbackVersion = '6.1'
        pensjonInformasjonVersion = '9.4.10'
    }
    repositories {
        maven {
            url "https://repo.adeo.no/repository/maven-central"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
    id "se.patrikerdes.use-latest-versions" version "0.2.12"
    id 'com.github.ben-manes.versions' version '0.21.0'
    id "org.owasp.dependencycheck" version "5.2.0"
    id "com.vanniktech.dependency.graph.generator" version "0.5.0"
    id "org.jetbrains.dokka" version "0.9.18"
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.springframework.boot"

group = 'no.nav.eessi'
version = '0.0.1'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
jar {
    archivesBaseName = 'eessi-fagmodul'
}

configurations {
    xsd
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // Allows for variable expiration-date of each cache-entry
    implementation("net.jodah:expiringmap:0.5.8")

    // Apache httpcomponents
    implementation("org.apache.httpcomponents:fluent-hc:4.5.6")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    implementation("commons-io:commons-io:2.6")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Swagger
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    //mock - test
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("com.nhaarman:mockito-kotlin-kt1.1:1.5.0")
    testImplementation("org.skyscreamer:jsonassert:1.5.0")

    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.10.2'

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    testImplementation("info.cukes:cucumber-spring:1.2.5")
    testImplementation("info.cukes:cucumber-java:1.2.5")
    testImplementation("info.cukes:cucumber-junit:1.2.5")
    testImplementation('org.apache.httpcomponents:fluent-hc:4.5.6')

    // OIDC
    implementation("no.nav.security:oidc-spring-support:${oidcTokenSupportVersion}")
    implementation("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    testImplementation("org.pac4j:spring-webmvc-pac4j:3.0.0")


    // Tjenestespesifikasjoner
    implementation('no.nav.helse:cxf-prometheus-metrics:dd7d125')
    implementation("no.nav.tjenester:nav-person-v3-tjenestespesifikasjon:${personV3Version}")
    xsd("no.nav.pensjon:pensjonsinformasjon-xsd:${pensjonInformasjonVersion}")

    jaxb ('org.glassfish.jaxb:jaxb-xjc:2.2.11')
    jaxb ('org.glassfish.jaxb:jaxb-runtime:2.2.11')

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
}

ext.schemasDir = "${projectDir}/src/main/resources/schemas"
ext.pensjonsinformasjonDir = "${schemasDir}/${configurations.xsd.dependencies[0].name}"

task copyPensjonsinformasjonXsdsFromArtifacts(type: Copy) {
    includeEmptyDirs = false
    from {
        configurations.xsd.asFileTree.forEach { artifact ->
            from zipTree(artifact)
        }
    }
    println(schemasDir)
    into pensjonsinformasjonDir
    include '**/*.xsd'
}

jaxb {
    xsdDir = pensjonsinformasjonDir
}

xjc.dependsOn copyPensjonsinformasjonXsdsFromArtifacts

compileKotlin.dependsOn xjc

clean.doFirst {
    delete pensjonsinformasjonDir
}

sourceSets["main"].java.srcDir("${buildDir}/generated-sources/xjc")

repositories {
    maven {
        url "https://repo.adeo.no/repository/maven-central"
    }
    maven {
        url "https://repo.adeo.no/repository/maven-releases"
    }
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn jacocoTestReport

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    resolutionStrategy() {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr', 'b'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Not a real release')
                }
            }
        }
    }
    revision = 'release'
}
