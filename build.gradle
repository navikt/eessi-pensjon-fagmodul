buildscript {

    ext {
        kotlinVersion = '1.3.61'
        springBootVersion = '2.2.2.RELEASE'
        springfoxVersion = '2.9.2'
        jacksonModuleKotlinVersion = '2.10.1'
        cxfVersion = '3.3.4'
        personV3Version = '3.6.1'
        oidcTokenSupportVersion = '0.2.18'
        logstashLogbackVersion = '6.3'
        pensjonInformasjonVersion = '9.4.10'
    }

    repositories {

        if (project.hasProperty('github')) {
            mavenCentral()

            maven {
                url "https://maven.pkg.github.com/navikt/maven-release"
                credentials {
                    username = "token"
                    password = "$System.env.GITHUB_TOKEN"
                }
            }

            maven {
                credentials {
                    username = "token"
                    password = "$System.env.GITHUB_TOKEN"
                }

                setUrl("https://maven.pkg.github.com/navikt/tjenestespesifikasjoner")
            }
        } else {
            maven {
                url "https://repo.adeo.no/repository/maven-central"
            }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }

}

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
    id "se.patrikerdes.use-latest-versions" version "0.2.12"
    id 'com.github.ben-manes.versions' version '0.21.0'
    id "org.owasp.dependencycheck" version "5.2.0"
    id "com.vanniktech.dependency.graph.generator" version "0.5.0"
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.springframework.boot"

group = 'no.nav.eessi'
version = '0.0.1'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

jar {
    archivesBaseName = 'eessi-fagmodul'
}

configurations {
    xsd
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: 'junit-vintage-engine'
    }

    //json path
    implementation("com.jayway.jsonpath:json-path:2.4.0")

    // Allows for variable expiration-date of each cache-entry
    implementation("net.jodah:expiringmap:0.5.9")

    // Apache httpcomponents
    implementation("org.apache.httpcomponents:fluent-hc:4.5.10")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    implementation("commons-io:commons-io:2.6")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Swagger
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    //mock - test
    testImplementation("org.junit.jupiter:junit-jupiter:5.5.2")
    testImplementation("org.junit.platform:junit-platform-suite-api:1.5.2")
    testImplementation("org.mockito:mockito-junit-jupiter:3.2.4")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
    testImplementation("org.skyscreamer:jsonassert:1.5.0")
    testImplementation("io.mockk:mockk:1.9.3")

    // Architecture tests
    testImplementation ("com.tngtech.archunit:archunit:0.11.0")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    // auditlogger syslog
    implementation("com.papertrailapp:logback-syslog4j:1.0.0")
    implementation("org.syslog4j:syslog4j:0.9.30")

    // OIDC
    implementation("no.nav.security:oidc-spring-support:${oidcTokenSupportVersion}")
    implementation("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    testImplementation("org.pac4j:spring-webmvc-pac4j:3.2.0")


    // Tjenestespesifikasjoner
    if (project.hasProperty('github')) {
        compile("no.nav.tjenestespesifikasjoner:person-v3-tjenestespesifikasjon:1+")
        xsd("no.nav.tjenestespesifikasjoner:pensjonsinformasjon-v1-tjenestespesifikasjon:1.2020.01.30-14.36-cdf257baea96")
    } else {
        implementation("no.nav.tjenester:nav-person-v3-tjenestespesifikasjon:${personV3Version}")
        xsd("no.nav.pensjon:pensjonsinformasjon-xsd:${pensjonInformasjonVersion}")
    }

    jaxb ('org.glassfish.jaxb:jaxb-xjc:2.3.2')
    jaxb ('org.glassfish.jaxb:jaxb-runtime:2.3.2')

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus:1.3.2")

    // Kafka -- 2.4.0 feiler
    implementation ("org.springframework.kafka:spring-kafka:2.3.4.RELEASE")
    testImplementation ("org.springframework.kafka:spring-kafka-test:2.3.4.RELEASE")
}

repositories {

    if (project.hasProperty('github')) {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }

        maven {
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }

            setUrl("https://maven.pkg.github.com/navikt/tjenestespesifikasjoner")
        }
    } else {
        maven {
            url "https://repo.adeo.no/repository/maven-central"
        }
        maven {
            url "https://repo.adeo.no/repository/maven-releases"
        }
    }
}

test {
    useJUnitPlatform()
}

// Temporary - until these misplaced dirs are cleaned in all builds
processResources.doFirst {
    delete "${projectDir}/src/main/resources/schemas"
    delete "${projectDir}/src/main/resources/xsdtemp"
}


ext.xsdTemp = "${buildDir}/xsdtemp"
ext.schemasDir = "${buildDir}/schemas"
ext.xsdArtifactName = file(ext.xsdTemp).list()[0]
ext.pensjonsinformasjonDir = "${schemasDir}"

task copyPensjonsinformasjonXsd(type: Copy) {
    from {
        configurations.xsd.asFileTree.each { artifact ->
            println("ArtifactName: " + artifact.name)
        }
    }
    into xsdTemp
}

task copyPensjonsinformasjonXsdsFromArtifacts(type: Copy) {
    with copyPensjonsinformasjonXsd
    includeEmptyDirs = false
    from zipTree( xsdTemp + "/" + xsdArtifactName)
    include '**/*.xsd'
    into pensjonsinformasjonDir
}

jaxb {
    xsdDir = pensjonsinformasjonDir
}

copyPensjonsinformasjonXsdsFromArtifacts.dependsOn tasks["copyPensjonsinformasjonXsd"]
xjc.dependsOn tasks["copyPensjonsinformasjonXsdsFromArtifacts"]
compileKotlin.dependsOn tasks["xjc"]

sourceSets["main"].resources.srcDir(schemasDir)
sourceSets["main"].java.srcDir("${buildDir}/generated-sources/xjc")

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    resolutionStrategy() {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr', 'b'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Not a real release')
                }
            }
        }
    }
    revision = 'release'
}
