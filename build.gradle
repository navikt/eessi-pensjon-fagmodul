buildscript {
    ext {
        kotlinVersion = '1.2.71'
        springBootVersion = '2.1.2.RELEASE'
        springSecurityVersion = '5.0.5.RELEASE'
        prometheusVersion = '0.5.0'
        springfoxVersion = '2.9.2'
        jacksonModuleKotlinVersion = '2.9.6'
        cxfVersion = '3.2.6'
        mockitoVersion = '2.8.+'
        personV3Version = '3.4.1'
//        oidcTokenSupportVersion = '0.2.7'
        oidcTokenSupportVersion = '0.2.9'
        logstashLogbackVersion = '4.10'
        pensjonInformasjonVersion = '9.4.10'
    }
    repositories {
        maven {
            url "https://repo.adeo.no/repository/maven-central"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("gradle.plugin.org.openrepose:gradle-jaxb-plugin:2.5.0")
    }
}

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.8'
    id 'com.github.ben-manes.versions' version '0.21.0'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openrepose.gradle.plugins.jaxb'

group = 'no.nav.eessi'
version = '0.0.1'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
jar {
    baseName = 'eessi-fagmodul'
}

configurations {
    xsd
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // Allows for variable expiration-date of each cache-entry
    implementation("net.jodah:expiringmap:0.5.8")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Swagger
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    //mock - test
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("com.nhaarman:mockito-kotlin-kt1.1:1.5.0")
    testImplementation("org.skyscreamer:jsonassert:1.5.0")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")

    testImplementation("info.cukes:cucumber-spring:1.2.5")
    testImplementation("info.cukes:cucumber-java:1.2.5")
    testImplementation("info.cukes:cucumber-junit:1.2.5")
    testImplementation('org.apache.httpcomponents:fluent-hc:4.5.6')

    // OIDC
    implementation("no.nav.security:oidc-spring-support:${oidcTokenSupportVersion}")
    implementation("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    testImplementation("org.pac4j:spring-webmvc-pac4j:3.0.0")


    // Tjenestespesifikasjoner
    implementation('no.nav.helse:cxf-prometheus-metrics:dd7d125')
    implementation("no.nav.tjenester:nav-person-v3-tjenestespesifikasjon:${personV3Version}")
    xsd("no.nav.pensjon:pensjonsinformasjon-xsd:${pensjonInformasjonVersion}")

    jaxb ('org.glassfish.jaxb:jaxb-xjc:2.2.11')
    jaxb ('org.glassfish.jaxb:jaxb-runtime:2.2.11')

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
}

ext.schemasDir = "${projectDir}/src/main/resources/schemas"
ext.pensjonsinformasjonDir = "${schemasDir}/${configurations.xsd.dependencies[0].name}"

task copyPensjonsinformasjonXsdsFromArtifacts(type: Copy) {
    includeEmptyDirs = false
    from {
        configurations.xsd.asFileTree.forEach { artifact ->
            from zipTree(artifact)
        }
    }
    println(schemasDir)
    into pensjonsinformasjonDir
    include '**/*.xsd'
}

jaxb {
    xsdDir = pensjonsinformasjonDir
}

xjc.dependsOn copyPensjonsinformasjonXsdsFromArtifacts

compileKotlin.dependsOn xjc

clean.doFirst {
    delete pensjonsinformasjonDir
}

sourceSets["main"].java.srcDir("${buildDir}/generated-sources/xjc")

sourceSets {
    integrationtest {
        java {
            compileClasspath += main.output
            compileClasspath += main.compileClasspath
            compileClasspath += test.output
            compileClasspath += test.compileClasspath
            runtimeClasspath += test.runtimeClasspath
        }
    }
}

task integrationtest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    testClassesDirs = sourceSets.integrationtest.output.classesDirs
    classpath = sourceSets.integrationtest.runtimeClasspath
}
integrationtest.dependsOn assemble

repositories {
    maven {
        url "https://repo.adeo.no/repository/maven-central"
    }
    maven {
        url "https://repo.adeo.no/repository/maven-releases"
    }
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    resolutionStrategy() {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Not a real release')
                }
            }
        }
    }
    revision = 'release'
}
